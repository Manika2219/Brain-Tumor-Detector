# Brain Tumor Detection using Convolutional Neural Networks (CNN) and Machine Learning

This project leverages deep learning, specifically Convolutional Neural Networks (CNN), to automate brain tumor detection from MRI scans. Developed in Python, the model aims to support medical professionals by identifying brain tumors quickly and accurately, facilitating early diagnosis and treatment.

## Project Overview

Brain tumors, due to their abnormal cell growth within the brain, require prompt detection and treatment to reduce health risks. Traditional MRI analysis is often time-consuming and can vary by practitioner. This project addresses these challenges by applying CNN-based image recognition, automating the detection of brain tumors from MRI images. Using a labeled dataset from Kaggle, the model learns to classify MRI images with and without tumors.

## Features

- **Automated Detection**: Provides a streamlined process to identify brain tumors, reducing manual review time.
- **High Accuracy with CNN**: Utilizes a CNN model designed to capture specific image patterns associated with tumors.
- **Real-World Data**: Trained on a comprehensive MRI dataset from Kaggle.
- **Python Implementation**: Built with Python libraries such as TensorFlow, Keras, and OpenCV for flexibility and scalability.

## Project Architecture

1. **Data Collection**:
   - Utilized a Kaggle dataset of MRI brain images labeled for tumor presence or absence.
   - Preprocessed images by resizing, normalizing, and converting to grayscale to ensure uniformity.

2. **Data Preprocessing**:
   - **Normalization**: Standardized pixel values to aid in model performance and reduce overfitting.
   - **Data Augmentation**: Applied rotation, flipping, and zooming to diversify the dataset.
   - **Segmentation**: Highlighted regions likely containing tumors to improve detection focus.

3. **Model Design (CNN Architecture)**:
   - Built a CNN model with multiple convolutional, pooling, and fully connected layers.
   - **Convolutional Layers**: Extracted detailed image features, edges, and textures.
   - **Pooling Layers**: Reduced dimensionality while retaining important features.
   - **Fully Connected Layers**: Integrated learned features to classify images as "Tumor" or "No Tumor."

4. **Training the Model**:
   - Split the dataset for training and validation (80-20).
   - Used metrics like accuracy, precision, recall, and F1 score for evaluation.
   - Applied dropout and the Adam optimizer to improve training efficiency and model performance.

5. **Prediction and Deployment**:
   - The model outputs "Tumor" or "No Tumor" with a confidence score for each MRI input.
   - Can be deployed as a standalone diagnostic tool or integrated with medical imaging systems.

## Libraries Used

- **TensorFlow/Keras**: For model construction and training.
- **OpenCV**: For image processing.
- **NumPy/Pandas**: For data handling and manipulation.
- **Matplotlib/Seaborn**: For visual analysis and performance tracking.

## Results

- **Training Accuracy**: Achieved over 90% accuracy on training data.
- **Validation Accuracy**: Maintained high validation accuracy, demonstrating generalization.
- **Precision & Recall**: Showed high values, indicating reliable tumor identification.

## How to Run

1. **Clone the Repository**:
   ```bash
   git clone https://github.com/yourusername/brain-tumor-detection.git
   ```
2. **Install Dependencies**:
   Install necessary libraries:
   ```bash
   pip install -r requirements.txt
   ```
3. **Run the Jupyter Notebook**:
   Execute `Brain_Tumor_Detection.ipynb` to load data, preprocess, train, and evaluate the model.

4. **Make Predictions**:
   Use `predict.py` to test individual MRI images with the trained model.

## Future Enhancements

- **Transfer Learning**: Integrate pre-trained models to further improve accuracy.
- **Advanced Preprocessing**: Enhance image quality and focus using more refined segmentation techniques.
- **UI Development**: Develop an accessible interface for broader application.

## Conclusion

This project showcases the potential of CNNs in medical imaging, supporting faster and more reliable brain tumor detection. With accurate MRI analysis, this model aids in early intervention and patient care improvement.

## Acknowledgments

Thanks to Kaggle for providing the MRI dataset and to open-source contributors for the tools used in this project.

## References

- [Kaggle Brain Tumor MRI Dataset](https://www.kaggle.com/)
- [TensorFlow Documentation](https://www.tensorflow.org/)
- [Keras Documentation](https://keras.io/)
